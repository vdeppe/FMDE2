package FMDE.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Composition;
  private ConceptPresentation props_Edge;
  private ConceptPresentation props_EdgeName;
  private ConceptPresentation props_FinSet;
  private ConceptPresentation props_FinSetElements;
  private ConceptPresentation props_FinSetRendering;
  private ConceptPresentation props_Graph;
  private ConceptPresentation props_GraphSet;
  private ConceptPresentation props_Mapping;
  private ConceptPresentation props_Node;
  private ConceptPresentation props_Project;
  private ConceptPresentation props_SourceNode;
  private ConceptPresentation props_TargetNode;
  private ConceptPresentation props_TotalFunction;
  private ConceptPresentation props_TotalFunctionRendering;
  private ConceptPresentation props_fmdeLanguage;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Composition:
        if (props_Composition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("composition");
          props_Composition = cpb.create();
        }
        return props_Composition;
      case LanguageConceptSwitch.Edge:
        if (props_Edge == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("edge");
          props_Edge = cpb.create();
        }
        return props_Edge;
      case LanguageConceptSwitch.EdgeName:
        if (props_EdgeName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EdgeName = cpb.create();
        }
        return props_EdgeName;
      case LanguageConceptSwitch.FinSet:
        if (props_FinSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinSet = cpb.create();
        }
        return props_FinSet;
      case LanguageConceptSwitch.FinSetElements:
        if (props_FinSetElements == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinSetElements = cpb.create();
        }
        return props_FinSetElements;
      case LanguageConceptSwitch.FinSetRendering:
        if (props_FinSetRendering == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FinSetRendering = cpb.create();
        }
        return props_FinSetRendering;
      case LanguageConceptSwitch.Graph:
        if (props_Graph == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("graph");
          props_Graph = cpb.create();
        }
        return props_Graph;
      case LanguageConceptSwitch.GraphSet:
        if (props_GraphSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GraphSet = cpb.create();
        }
        return props_GraphSet;
      case LanguageConceptSwitch.Mapping:
        if (props_Mapping == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("mapping");
          props_Mapping = cpb.create();
        }
        return props_Mapping;
      case LanguageConceptSwitch.Node:
        if (props_Node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Node = cpb.create();
        }
        return props_Node;
      case LanguageConceptSwitch.Project:
        if (props_Project == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Project = cpb.create();
        }
        return props_Project;
      case LanguageConceptSwitch.SourceNode:
        if (props_SourceNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SourceNode = cpb.create();
        }
        return props_SourceNode;
      case LanguageConceptSwitch.TargetNode:
        if (props_TargetNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TargetNode = cpb.create();
        }
        return props_TargetNode;
      case LanguageConceptSwitch.TotalFunction:
        if (props_TotalFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TotalFunction = cpb.create();
        }
        return props_TotalFunction;
      case LanguageConceptSwitch.TotalFunctionRendering:
        if (props_TotalFunctionRendering == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TotalFunctionRendering = cpb.create();
        }
        return props_TotalFunctionRendering;
      case LanguageConceptSwitch.fmdeLanguage:
        if (props_fmdeLanguage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_fmdeLanguage = cpb.create();
        }
        return props_fmdeLanguage;
    }
    return null;
  }
}
