package FMDE.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class FinSetRendering__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x41ba7664a5f64ebaL, 0xb5f52e676d679bacL, 0x6be9763e36a5faaL, "FMDE.structure.FinSetRendering");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<List<Object>> retrieveInputPorts_id1y2YH9MsLCs = new SMethodBuilder<List<Object>>(new SJavaCompoundTypeImpl((Class<List<Object>>) ((Class) Object.class))).name("retrieveInputPorts").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1y2YH9MsLCs").registry(REGISTRY).build();
  public static final SMethod<List<Object>> retrieveOutputPorts_id1y2YH9MsMkc = new SMethodBuilder<List<Object>>(new SJavaCompoundTypeImpl((Class<List<Object>>) ((Class) Object.class))).name("retrieveOutputPorts").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1y2YH9MsMkc").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(retrieveInputPorts_id1y2YH9MsLCs, retrieveOutputPorts_id1y2YH9MsMkc);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<Object> retrieveInputPorts_id1y2YH9MsLCs(@NotNull SNode __thisNode__) {
    return ListSequence.fromListAndArray(new ArrayList<Object>(), "Input");
  }
  /*package*/ static List<Object> retrieveOutputPorts_id1y2YH9MsMkc(@NotNull SNode __thisNode__) {
    return ListSequence.fromListAndArray(new ArrayList<Object>(), "Output");
  }

  /*package*/ FinSetRendering__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<Object>) retrieveInputPorts_id1y2YH9MsLCs(node));
      case 1:
        return (T) ((List<Object>) retrieveOutputPorts_id1y2YH9MsMkc(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
