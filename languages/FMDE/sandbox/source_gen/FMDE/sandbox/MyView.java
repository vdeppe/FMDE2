package FMDE.sandbox;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.jetpad.mapper.Mapper;

public class MyView extends View {
  public Property<Integer> width = new ValueProperty<Integer>(100);
  public Property<Integer> height = new ValueProperty<Integer>(50);
  public MyView() {
    this(new MyView.MyViewFigureMapperFactory());
  }
  public MyView(MyView.MyViewFigureMapperFactory mapperFactory) {
  }
  private static class MyViewFigureMapperFactory implements MapperFactory<MyView, MyView> {
    public Mapper<? extends MyView, ? extends MyView> createMapper(MyView figure) {
      return new MyView.MyViewFigureMapper<MyView>(figure);
    }
  }
  protected static class MyViewFigureMapper<T extends MyView> extends Mapper<T, T> {
    protected MyViewFigureMapper(T figure) {
      super(figure, figure);
    }
    @Override
    protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
      super.registerSynchronizers(configuration);
    }
  }
}
